# Rename columns
colnames(uow.data) <- c("date", "hour_18", "hour_19", "hour_20")
uow.data.shifted <- uow.data
for (i in c(1, 2, 3, 4, 7)) {
uow.data.shifted <- shift.column(data=uow.data.shifted, columns="hour_20",
len=i, up=FALSE, newNames=sprintf("t%d", i))
}
#create new fetures using 18H and 19H
sum18_19 <- (uow.data.shifted$`hour_18` + uow.data.shifted$`hour_19`)
#z-score normalization
uow.data.scaled <- as.data.frame(uow.data.shifted %>% mutate_at(vars(-date), scale,
center=T)) # Drop dates Column
uow.data.scaled <- within(uow.data.scaled, rm(date))
# Set the number of training samples
num_train <- 380
# Create a logical vector indicating which samples are in the training set
train_indices <- rep(FALSE, nrow(uow.data.scaled))
train_indices[1:num_train] <- TRUE
# Create training and testing sets
data.train <- uow.data.scaled[train_indices, ]
data.test <- uow.data.scaled[!train_indices, ]
# Define the different hidden layer configurations
hidden_configs <- list(
c(100),
c(150, 150),
c(150, 150, 150),
c(100),
c(150, 150),
c(150, 100, 50)
)
# Train the neural network models and store the results in a list
models <- list()
training_times <- numeric(length(hidden_configs))
for (i in seq_along(hidden_configs)) {
formula.2 <- `hour_20` ~ t1 + t2 + t3 + t4 + t7 + sum18_19
time.start <- Sys.time()
models[[i]] <- neuralnet(
formula.2, data = data.train,
hidden = hidden_configs[[i]],
linear.output = FALSE,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time.end <- Sys.time()
training_times[i] <- time.end - time.start
}
library(data.table)
library(tidyverse)
library(plotly)
library(readxl)
library(neuralnet)
library(caTools)
library(useful)
library(tictoc)
library(Metrics)
library(ggplot2)
# Load the data
uow.data <- read_excel("uow_consumption.xlsx")
# Rename columns
colnames(uow.data) <- c("date", "hour_18", "hour_19", "hour_20")
uow.data.shifted <- uow.data
for (i in c(1, 2, 3, 4, 7)) {
uow.data.shifted <- shift.column(data=uow.data.shifted, columns="hour_20",
len=i, up=FALSE, newNames=sprintf("t%d", i))
}
#create new features using 18H and 19H
uow.data.18_19 <- uow.data
for (col in c("hour_18", "hour_19")) {
for (i in c(1, 2, 3, 4, 7)) {
uow.data.shifted <- shift.column(data=uow.data.shifted, columns=col,
len=i, up=FALSE, newNames=sprintf("%s_t%d", col, i))
}
}
uow.data.18_19$sum18_19 <- uow.data.shifted$hour_18_t0 + uow.data.shifted$hour_19_t0
library(data.table)
library(tidyverse)
library(plotly)
library(readxl)
library(neuralnet)
library(caTools)
library(useful)
library(tictoc)
library(Metrics)
library(ggplot2)
# Load the data
uow.data <- read_excel("uow_consumption.xlsx")
# Rename columns
colnames(uow.data) <- c("date", "hour_18", "hour_19", "hour_20")
# Create shifted columns for NARX approach
uow.data.shifted <- uow.data
for (i in c(1, 2, 3, 4, 7)) {
uow.data.shifted <- shift.column(data=uow.data.shifted, columns=c("hour_18", "hour_19", "hour_20"),
len=i, up=FALSE, newNames=sprintf("t%d", i))
}
library(data.table)
library(tidyverse)
library(plotly)
library(readxl)
library(neuralnet)
library(caTools)
library(useful)
library(tictoc)
library(Metrics)
library(ggplot2)
# Load the data
uow.data <- read_excel("uow_consumption.xlsx")
# Rename columns
colnames(uow.data) <- c("date", "hour_18", "hour_19", "hour_20")
uow.data.shifted <- uow.data
for (i in c(1, 2, 3, 4, 7)) {
uow.data.shifted <- shift.column(data=uow.data.shifted, columns="hour_20",
len=i, up=FALSE, newNames=sprintf("t%d", i))
}
#create new features using 18H and 19H
uow.data.shifted <- uow.data
for (col in c("hour_18", "hour_19")) {
for (i in c(1, 2, 3, 4, 7)) {
uow.data.shifted <- shift.column(data=uow.data.shifted, columns=col,
len=i, up=FALSE, newNames=sprintf("%s_t%d", col, i))
}
}
uow.data.shifted$sum18_19 <- uow.data.shifted$hour_18_t0 + uow.data.shifted$hour_19_t0
library(data.table)
library(tidyverse)
library(plotly)
library(readxl)
library(neuralnet)
library(caTools)
library(useful)
library(tictoc)
library(Metrics)
library(ggplot2)
# Load the data
uow.data <- read_excel("uow_consumption.xlsx")
# Rename columns
colnames(uow.data) <- c("date", "hour_18", "hour_19", "hour_20")
uow.data.shifted <- uow.data
for (i in c(1, 2, 3, 4, 7)) {
uow.data.shifted <- shift.column(data=uow.data.shifted, columns="hour_20",
len=i, up=FALSE, newNames=sprintf("t%d", i))
}
#create new fetures using 9H and 10H
uow.data.shifted$`Sum18_19` <- (uow.data.shifted$`hour_18` + uow.data.shifted$`hour_19`)
#z-score normalization
uow.data.scaled <- as.data.frame(uow.data.shifted %>% mutate_at(vars(-date), scale,
center=T)) # Drop dates Column
uow.data.scaled <- within(uow.data.scaled, rm(date))
# Set the number of training samples
num_train <- 380
# Create a logical vector indicating which samples are in the training set
train_indices <- rep(FALSE, nrow(uow.data.scaled))
train_indices[1:num_train] <- TRUE
# Create training and testing sets
data.train <- uow.data.scaled[train_indices, ]
data.test <- uow.data.scaled[!train_indices, ]
# Define the different hidden layer configurations
hidden_configs <- list(
c(100),
c(150, 150),
c(150, 150, 150),
c(100),
c(150, 150),
c(150, 100, 50)
)
# Train the neural network models and store the results in a list
models <- list()
training_times <- numeric(length(hidden_configs))
for (i in seq_along(hidden_configs)) {
formula.2 <- `hour_20` ~ t1 + t2 + t3 + t4 + t7 + Sum18_19
time.start <- Sys.time()
models[[i]] <- neuralnet(
formula.2, data = data.train,
hidden = hidden_configs[[i]],
linear.output = FALSE,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time.end <- Sys.time()
training_times[i] <- time.end - time.start
}
# Compute the training scores for each model
train_scores <- sapply(models, function(x) min(x$result.matrix["error", ]))
# Print the results
cat("Training Scores (Logarithmic Loss)\n with formula = `hour_20`~t1+t2+t3+t7 \n")
cat("Training Scores (Logarithmic Loss)\n with formula = `hour_20`~t1+t2+t3+t7+ Sum18_19 \n")
cat(paste(
c(
"1 Hidden Layer, 150 Hidden Units:",
"2 Hidden Layers, 150 Hidden Units Each:",
"3 Hidden Layers, 150 with softplus Hidden Units Each:",
"\n1 Hidden Layers, 100 Hidden Units Each with tanh:",
"\n2 Hidden Layers, 150 Hidden Units Each with tanh:",
"\n3 Hidden Layers, 150,100,50 Hidden Units Each with tanh:"
),
train_scores,
collapse = "\n"
))
cat("\n")
cat("Training Times:\n")
cat("Training Times:\n")
cat(paste(
c(
"1 Hidden Layer, 150 Hidden Units:",
"2 Hidden Layers, 150 Hidden Units Each:",
"3 Hidden Layers, 150 Hidden Units Each:",
"1 Hidden Layers, 100 Hidden Units Each with tanh:",
"2 Hidden Layers, 150 Hidden Units Each with tanh:",
"3 Hidden Layers, 150,100,50 Hidden Units Each with tanh:"
),
training_times,
collapse = "\n"
))
cat("\n")
# Make predictions on the testing set using each model
predictions <- lapply(models, function(x) predict(x, data.test))
# Compute the testing scores for each model
test_scores <- sapply(predictions, function(x) {
rmse(data.test$hour_20, x)
})
# Compute the testing MAE for each model
test_mae <- sapply(predictions, function(x) {
mae(data.test$hour_20, x)
})
# Compute the testing MAPE for each model
test_mape <- sapply(predictions, function(x) {
mape(data.test$hour_20, x)
})
# Compute the testing sMAPE for each model
test_smape <- sapply(predictions, function(x) {
smape(data.test$hour_20, x)
})
cat(paste(
c(
"1 Hidden Layer, 150 Hidden Units:",
"2 Hidden Layers, 150 Hidden Units Each:",
"3 Hidden Layers, 150 Hidden Units Each:",
"1 Hidden Layers, 100 Hidden Units Each with tanh:",
"2 Hidden Layers, 150 Hidden Units Each with tanh:",
"3 Hidden Layers, 150,100,50 Hidden Units Each with tanh:"
),
test_scores,
collapse = "\n"
))
cat("\n")
cat("Testing MAE:\n")
cat(paste(
c(
"1 Hidden Layer, 150 Hidden Units:",
"2 Hidden Layers, 150 Hidden Units Each:",
"3 Hidden Layers, 150 Hidden Units Each:",
"1 Hidden Layers, 100 Hidden Units Each with tanh:",
"2 Hidden Layers, 150 Hidden Units Each with tanh:",
"3 Hidden Layers, 150,100,50 Hidden Units Each with tanh:"
),
test_mae,
collapse = "\n"
))
cat("\n")
cat("Testing MAPE:\n")
cat(paste(
c(
"1 Hidden Layer, 150 Hidden Units:",
"2 Hidden Layers, 150 Hidden Units Each:",
"3 Hidden Layers, 150 Hidden Units Each:",
"1 Hidden Layers, 100 Hidden Units Each with tanh:",
"2 Hidden Layers, 150 Hidden Units Each with tanh:",
"3 Hidden Layers, 150,100,50 Hidden Units Each with tanh:"
),
test_mape,
collapse = "\n"
))
cat("\n")
cat("Testing sMAPE:\n")
cat(paste(
c(
"1 Hidden Layer, 150 Hidden Units:",
"2 Hidden Layers, 150 Hidden Units Each:",
"3 Hidden Layers, 150 Hidden Units Each:",
"1 Hidden Layers, 100 Hidden Units Each with tanh:",
"2 Hidden Layers, 150 Hidden Units Each with tanh:",
"3 Hidden Layers, 150,100,50 Hidden Units Each with tanh:"
),
test_smape,
collapse = "\n"
))
cat("\n")
# Create a data frame with the results
results <- data.frame(
Model = c(
"1 Hidden Layer, 150 Hidden Units",
"2 Hidden Layers, 150 Hidden Units Each",
"3 Hidden Layers, 150 Hidden Units Each",
"1 Hidden Layers, 100 Hidden Units Each with tanh",
"2 Hidden Layers, 150 Hidden Units Each with tanh",
"3 Hidden Layers, 150,100,50 Hidden Units Each with tanh"
),
RMSE = c(0.805976890641062, 0.808463924122556, 0.808474796904582, 0.475472855422915, 0.808240163482528, 0.80846388193305),
MAE = c(0.663127907570389, 0.664546904906524, 0.664554331971707, 0.378346664667473, 0.664407788330958, 0.664545401675358),
MAPE = c(1.02419383738988, 0.999993685875724, 1, 1.83536721396827, 1.00259801145465, 1.00000443623987),
sMAPE = c(1.99053383486298, 1.99997407669986, 2, 1.1945668421468, 1.99549284121816, 1.99992867271961)
)
# Print the results
print(results)
# Create a data frame with the results
results <- data.frame(
Model = c(
"1 Hidden Layer, 150 Hidden Units",
"2 Hidden Layers, 150 Hidden Units Each",
"3 Hidden Layers, 150 Hidden Units Each",
"1 Hidden Layers, 100 Hidden Units Each with tanh",
"2 Hidden Layers, 150 Hidden Units Each with tanh",
"3 Hidden Layers, 150,100,50 Hidden Units Each with tanh"
),
RMSE = c(0.805976890641062, 0.808463924122556, 0.808474796904582, 0.475472855422915, 0.808240163482528, 0.80846388193305),
MAE = c(0.663127907570389, 0.664546904906524, 0.664554331971707, 0.378346664667473, 0.664407788330958, 0.664545401675358),
MAPE = c(1.02419383738988, 0.999993685875724, 1, 1.83536721396827, 1.00259801145465, 1.00000443623987),
sMAPE = c(1.99053383486298, 1.99997407669986, 2, 1.1945668421468, 1.99549284121816, 1.99992867271961)
)
# Print the results
print(results)
# Generate a scatter plot of the predicted vs. actual values
plot(predicted, actual, xlab = "Predicted", ylab = "Actual", main = "Predicted vs. Actual (1 Hidden Layers, 100 Hidden Units Each with tanh)")
#Subtask 2
library(data.table)
library(tidyverse)
library(plotly)
library(readxl)
library(neuralnet)
library(caTools)
library(useful)
library(tictoc)
library(Metrics)
library(ggplot2)
# Load the data
uow.data <- read_excel("uow_consumption.xlsx")
# Rename columns
colnames(uow.data) <- c("date", "hour_18", "hour_19", "hour_20")
uow.data.shifted <- uow.data
for (i in c(1, 2, 3, 4, 7)) {
uow.data.shifted <- shift.column(data=uow.data.shifted, columns="hour_20",
len=i, up=FALSE, newNames=sprintf("t%d", i))
}
#create new fetures using 18H and 19H
uow.data.shifted$`Sum18_19` <- (uow.data.shifted$`hour_18` + uow.data.shifted$`hour_19`)
#z-score normalization
uow.data.scaled <- as.data.frame(uow.data.shifted %>% mutate_at(vars(-date), scale,
center=T)) # Drop dates Column
uow.data.scaled <- within(uow.data.scaled, rm(date))
# Set the number of training samples
num_train <- 380
# Create a logical vector indicating which samples are in the training set
train_indices <- rep(FALSE, nrow(uow.data.scaled))
train_indices[1:num_train] <- TRUE
# Create training and testing sets
data.train <- uow.data.scaled[train_indices, ]
data.test <- uow.data.scaled[!train_indices, ]
# Define the different hidden layer configurations
hidden_configs <- list(
c(100),
c(150, 150),
c(150, 150, 150),
c(100),
c(150, 150),
c(150, 100, 50)
)
# Train the neural network models and store the results in a list
models <- list()
training_times <- numeric(length(hidden_configs))
for (i in seq_along(hidden_configs)) {
formula.2 <- `hour_20` ~ t1 + t2 + t3 + t4 + t7 + Sum18_19
time.start <- Sys.time()
models[[i]] <- neuralnet(
formula.2, data = data.train,
hidden = hidden_configs[[i]],
linear.output = FALSE,
rep = 5,
act.fct = "logistic",
threshold = 2
)
time.end <- Sys.time()
training_times[i] <- time.end - time.start
}
# Compute the training scores for each model
train_scores <- sapply(models, function(x) min(x$result.matrix["error", ]))
# Print the results
cat("Training Scores (Logarithmic Loss)\n with formula = `hour_20`~t1+t2+t3+t7+ Sum18_19 \n")
cat(paste(
c(
"1 Hidden Layer, 150 Hidden Units:",
"2 Hidden Layers, 150 Hidden Units Each:",
"3 Hidden Layers, 150 with softplus Hidden Units Each:",
"\n1 Hidden Layers, 100 Hidden Units Each with tanh:",
"\n2 Hidden Layers, 150 Hidden Units Each with tanh:",
"\n3 Hidden Layers, 150,100,50 Hidden Units Each with tanh:"
),
train_scores,
collapse = "\n"
))
cat("\n")
# Print the training times for each model
cat("Training Times:\n")
cat(paste(
c(
"1 Hidden Layer, 150 Hidden Units:",
"2 Hidden Layers, 150 Hidden Units Each:",
"3 Hidden Layers, 150 Hidden Units Each:",
"1 Hidden Layers, 100 Hidden Units Each with tanh:",
"2 Hidden Layers, 150 Hidden Units Each with tanh:",
"3 Hidden Layers, 150,100,50 Hidden Units Each with tanh:"
),
training_times,
collapse = "\n"
))
cat("\n")
# Make predictions on the testing set using each model
predictions <- lapply(models, function(x) predict(x, data.test))
# Compute the testing scores for each model
test_scores <- sapply(predictions, function(x) {
rmse(data.test$hour_20, x)
})
# Compute the testing MAE for each model
test_mae <- sapply(predictions, function(x) {
mae(data.test$hour_20, x)
})
# Compute the testing MAPE for each model
test_mape <- sapply(predictions, function(x) {
mape(data.test$hour_20, x)
})
# Compute the testing sMAPE for each model
test_smape <- sapply(predictions, function(x) {
smape(data.test$hour_20, x)
})
# Print the results
cat("Testing Scores:\n")
cat(paste(
c(
"1 Hidden Layer, 150 Hidden Units:",
"2 Hidden Layers, 150 Hidden Units Each:",
"3 Hidden Layers, 150 Hidden Units Each:",
"1 Hidden Layers, 100 Hidden Units Each with tanh:",
"2 Hidden Layers, 150 Hidden Units Each with tanh:",
"3 Hidden Layers, 150,100,50 Hidden Units Each with tanh:"
),
test_scores,
collapse = "\n"
))
cat("\n")
cat("Testing MAE:\n")
cat(paste(
c(
"1 Hidden Layer, 150 Hidden Units:",
"2 Hidden Layers, 150 Hidden Units Each:",
"3 Hidden Layers, 150 Hidden Units Each:",
"1 Hidden Layers, 100 Hidden Units Each with tanh:",
"2 Hidden Layers, 150 Hidden Units Each with tanh:",
"3 Hidden Layers, 150,100,50 Hidden Units Each with tanh:"
),
test_mae,
collapse = "\n"
))
cat("\n")
cat("Testing MAPE:\n")
cat(paste(
c(
"1 Hidden Layer, 150 Hidden Units:",
"2 Hidden Layers, 150 Hidden Units Each:",
"3 Hidden Layers, 150 Hidden Units Each:",
"1 Hidden Layers, 100 Hidden Units Each with tanh:",
"2 Hidden Layers, 150 Hidden Units Each with tanh:",
"3 Hidden Layers, 150,100,50 Hidden Units Each with tanh:"
),
test_mape,
collapse = "\n"
))
cat("\n")
cat("Testing sMAPE:\n")
cat(paste(
c(
"1 Hidden Layer, 150 Hidden Units:",
"2 Hidden Layers, 150 Hidden Units Each:",
"3 Hidden Layers, 150 Hidden Units Each:",
"1 Hidden Layers, 100 Hidden Units Each with tanh:",
"2 Hidden Layers, 150 Hidden Units Each with tanh:",
"3 Hidden Layers, 150,100,50 Hidden Units Each with tanh:"
),
test_smape,
collapse = "\n"
))
cat("\n")
# Extract the predicted values from the model
predicted <- predictions[[3]]$net.result
# Extract the predicted values from the model
predicted <- predictions[[1]]$net.result
# Extract the predicted values from the first model
predicted <- predictions[[1]]
# Create a data frame with the predicted and actual values
results <- data.frame(
predicted = predicted,
actual = data.test$hour_20
)
# Create the scatter plot
plot_ly(results, x = ~actual, y = ~predicted, type = "scatter", mode = "markers")
# Create the scatter plot
plot <- plot_ly(results, x = ~actual, y = ~predicted, type = "scatter", mode = "markers")
# Add a diagonal line to the plot
plot <- plot %>% add_trace(x = c(min(results$actual), max(results$actual)),
y = c(min(results$actual), max(results$actual)),
mode = "lines", line = list(color = "blue"))
# Show the plot
plot
